name: Build and Release opencore-amr with JNI

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake libtool build-essential

      - name: Build opencore-amr (Linux)
        run: |
          tar xf opencore-amr-0.1.6.tar.gz
          cd opencore-amr-0.1.6
          ./configure \
            --enable-static \
            --disable-shared \
            CFLAGS="-O3 -flto -fvisibility=hidden -DNDEBUG -ffunction-sections -fdata-sections -fPIC" \
            CXXFLAGS="-O3 -flto -fvisibility=hidden -DNDEBUG -ffunction-sections -fdata-sections -fPIC" \
            LDFLAGS="-flto -Wl,--gc-sections"
          make -j$(nproc) V=1

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build JNI wrapper (Linux)
        run: |
          cp opencore-amr-0.1.6/amrnb/*.h .
          g++ -O3 -flto -fvisibility=hidden -DNDEBUG -ffunction-sections -fdata-sections \
            -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" -I. \
            -fPIC -c amrdecoder-jni.c
          g++ -flto -Wl,--gc-sections -shared \
            -o libamrdecoder.so amrdecoder-jni.o \
            opencore-amr-0.1.6/amrnb/.libs/libopencore-amrnb.a
          strip --strip-all libamrdecoder.so
          mkdir -p artifacts/linux
          cp libamrdecoder.so artifacts/linux/

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts/linux/

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86_64, i686]
        include:
          - arch: x86_64
            toolchain: mingw-w64-x86_64-toolchain
            prefix: x86_64-w64-mingw32
            artifact: windows64
            msystem: MINGW64
          - arch: i686
            toolchain: mingw-w64-i686-toolchain
            prefix: i686-w64-mingw32
            artifact: windows32
            msystem: MINGW32
    steps:
      - uses: actions/checkout@v3

      - uses: msys2/setup-msys2@v2
        with:
          install: >-
            base-devel
            autoconf
            automake
            libtool
            ${{ matrix.toolchain }}
          msystem: ${{ matrix.msystem }}
          update: true
          release: false

      - name: Install specific i686 compiler
        if: matrix.arch == 'i686'
        shell: msys2 {0}
        run: |
          pacman -S --needed --noconfirm mingw-w64-i686-gcc mingw-w64-i686-gcc-libs

      - name: Build opencore-amr (Windows ${{ matrix.arch }})
        shell: msys2 {0}
        run: |
          tar xf opencore-amr-0.1.6.tar.gz
          cd opencore-amr-0.1.6
          export CC="${{ matrix.prefix }}-gcc"
          export CXX="${{ matrix.prefix }}-g++"
          ./configure \
            --host=${{ matrix.prefix }} \
            --enable-static \
            --disable-shared \
            CFLAGS="-O3 -flto -DNDEBUG -ffunction-sections -fdata-sections" \
            CXXFLAGS="-O3 -flto -DNDEBUG -ffunction-sections -fdata-sections" \
            LDFLAGS="-flto -Wl,--gc-sections"
          make -j$(nproc) V=1

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build JNI wrapper (Windows ${{ matrix.arch }})
        shell: msys2 {0}
        run: |
          cp opencore-amr-0.1.6/amrnb/*.h .
          ${{ matrix.prefix }}-g++ -O3 -flto -DNDEBUG -ffunction-sections -fdata-sections \
            -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/win32" -I. \
            -c amrdecoder-jni.c
          ${{ matrix.prefix }}-g++ -flto -Wl,--gc-sections -shared \
            -o amrdecoder.dll amrdecoder-jni.o \
            opencore-amr-0.1.6/amrnb/.libs/libopencore-amrnb.a \
            -static-libgcc -static-libstdc++ \
            -Wl,--kill-at
          ${{ matrix.prefix }}-strip --strip-all amrdecoder.dll
          mkdir -p artifacts/${{ matrix.artifact }}
          cp amrdecoder.dll artifacts/${{ matrix.artifact }}/

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-artifacts
          path: artifacts/${{ matrix.artifact }}

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x86_64]
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: brew install autoconf automake libtool

      - name: Build opencore-amr (macOS ${{ matrix.arch }})
        run: |
          tar xf opencore-amr-0.1.6.tar.gz
          cd opencore-amr-0.1.6
          ./configure \
            --build="${{ matrix.arch }}-apple-darwin" \
            --host="${{ matrix.arch }}-apple-darwin" \
            --enable-static \
            --disable-shared \
            CFLAGS="-arch ${{ matrix.arch }} -O3 -flto -fvisibility=hidden -DNDEBUG -ffunction-sections -fdata-sections -fPIC" \
            CXXFLAGS="-arch ${{ matrix.arch }} -O3 -flto -fvisibility=hidden -DNDEBUG -ffunction-sections -fdata-sections -fPIC" \
            LDFLAGS="-arch ${{ matrix.arch }} -flto -Wl,-dead_strip"
          make -j$(sysctl -n hw.logicalcpu) V=1

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build JNI wrapper (macOS ${{ matrix.arch }})
        run: |
          cp opencore-amr-0.1.6/amrnb/*.h .
          clang -arch ${{ matrix.arch }} \
            -O3 -flto -fvisibility=hidden -DNDEBUG -ffunction-sections -fdata-sections \
            -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/darwin" -I. \
            -fPIC -c amrdecoder-jni-macos.c
          clang -arch ${{ matrix.arch }} \
            -flto -Wl,-dead_strip -dynamiclib \
            -o libamrdecoder.dylib amrdecoder-jni-macos.o \
            opencore-amr-0.1.6/amrnb/.libs/libopencore-amrnb.a \
            -framework CoreFoundation -framework AudioToolbox
          strip -x libamrdecoder.dylib
          mkdir -p artifacts/macos_${{ matrix.arch }}
          cp libamrdecoder.dylib artifacts/macos_${{ matrix.arch }}/

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-artifacts
          path: artifacts/macos_${{ matrix.arch }}

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*artifacts'
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: Release ${{ github.event.inputs.tag || github.ref_name }}
          files: |
            artifacts/linux/libamrdecoder.so
            artifacts/windows64/amrdecoder.dll
            artifacts/windows32/amrdecoder.dll
            artifacts/macos_arm64/libamrdecoder.dylib
            artifacts/macos_x86_64/libamrdecoder.dylib
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
